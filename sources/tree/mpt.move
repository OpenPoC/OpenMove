module openmove::mpt {

    use std::vector::{borrow, push_back, length};
    use aptos_std::aptos_hash::keccak256;
    use openmove::std::{bytes_to_nibbles, contains_slice, slice};
    use openmove::rlp;

    const EINVALID_NODE: u64 = 21001;
    const EINVALID_NODE_HASH: u64 = 21002;
    const ENODE_MISSING: u64 = 21003;

    /// Verify mpt proof, and return the target value on success
    /// NOTE: proof is a plain concated list of nodes, so proof = concate(node0, node1, node2, ...)
    public fun verify_proof(hash: &vector<u8>, key: vector<u8>, proof: vector<u8>): vector<u8> {
        let buf = rlp::new_buf(proof);
        let nibbles = bytes_to_nibbles(&keccak256(key));
        let nibble_offset = 0u64;
        push_back(&mut nibbles, 16);
        loop {
            let (node_data, _) = rlp::next(&mut buf); // Empty remaining byte should fail here
            assert!(&keccak256(node_data) == hash, EINVALID_NODE_HASH);
            let node = rlp::new_buf(node_data);
            rlp::unwrap_list(&mut node); // A non-list should fail here.
            let count = rlp::count(&node);
            if (count == 17) { // a full node
                let index = *borrow<u8>(&nibbles, nibble_offset);
                while (index > 0) {
                    rlp::advance(&mut node);
                    index = index - 1;
                };
                hash = &rlp::read_bytes(&mut node);
                nibble_offset = nibble_offset + 1;
            } else if (count == 2) { // a short node
                let (path, has_value) = parse_compacted_path(&rlp::read_bytes(&mut node));
                assert!(contains_slice(&nibbles, &path, nibble_offset), EINVALID_NODE);
                nibble_offset = nibble_offset + length<u8>(&path);
                let value_buf = rlp::new_buf(rlp::read_bytes(&mut node));
                let value = rlp::read_bytes(&mut value_buf);
                if (has_value) {
                    return value
                };
                hash = &value;
            } else {
                abort(EINVALID_NODE)
            };
            assert!(length<u8>(hash) > 0, ENODE_MISSING);
        }
    }

    /// Parse encoded path of short nodes, return parsed path with wheter it has a value
    public fun parse_compacted_path(path: &vector<u8>): (vector<u8>, bool) {
        let flag = *borrow<u8>(path, 0) >> 4;
        let nibbles = bytes_to_nibbles(path);
        let offset = if (flag & 1 > 0) { // odd nibbles
            1
        } else { // even nibbles 
            2
        };
       (slice(&nibbles, offset, length<u8>(&nibbles)), flag > 1)
    }

    #[test]
    fun test_verify_proof() {
        let root = x"8337239d521bd93f02f55f1dc3db62b10a834fc804bd31aaed98b52fc663c9e5";
        let key = x"a6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49";
        let proof = x"f90211a0dafbcd5c3b5e6276b4e71222c3744d1ec6ad9d25ca1caed3e4821300effabfbea0458d4ce0f0cab1afbd15acbc69eb8206a03b6dc0d3bfd82255395b08c68cf507a09037c2541b4f9055b3535cb9519b1b65a9eb2df099e19788be98d8c6cfcf70bca0ed63bb564f9aff544843003248f3d63105d5b14df4fb9d5ae40fd3210f309193a051ec2fa07a9a69a8a5e02cba3354d998e58f975c8745b021d7935d2b1685d4bba0d5e9505a5779c48464d163f8c74f2a87f25c3d06f93e93323da9d9279e5da1a9a0f4baeed83cd0218f9d7780e270d97f3e7793398a422fd75b9584d3eabd9abe2fa00e99f5e3bd38bd07e8e707de66cacd48e1b1460c5b6d91081b37944fbde4c510a0968234e8657ee613f1a44611e45b7056e23fa583c23b186439848869980162e0a05e4d0def691113d229808e866c7fbedf976f4d479e02327715c8e103fc8d470fa058cc691a0dea93ced5ed5e43dddc6ef81eeff8f21b8f3c461be8d0f6eed86c0da0717b9b5c86183e35fb607bfc606c6f7ec109e231a32c2530de7b0d4d833d32dda0859a5c33f68977fa39dad924864880af85522cb498653abc8379bbefb4fb062aa071516445ec6adfe13bbcb510c937068c560e24882abdaeceb797c66443e44462a0246a8a8b5cb71f3ad3dc1c45ccea7829d0089c6a64416a74f486ebb5cae9fd9ea0992b04facd4b70aa6e2786c97bcef8e3234943646539fbc220048f17a4566fe080f90211a065a6b0f08accaf855761b657ab145a373475dc641a8fc4349a0219feec4c6065a00a811a75ca4fa82cd99c0eeafdaedce0af64138a482d0d1d031e5d35f81a6d49a04a5d8cc1d810c1ae3bdf15dd57a0ede7454ec9f62e367c3d204fb17ead3059eaa04bb84173ee48689268371d9256f12066bf60f886f6ced45cb6dae995b676d634a0376d2e469356a4642ba0038e74829c2cdfab76533dac1060243214318094ef26a060d7bb7104a882158bae88527f6967e89e905d51dc4cde35d1495eb60e5d4835a0e996ae7e16f98133cb84fe1ad749b83646cfcb20309509b81af00a434993a5f3a0ce9d97eb37a9a2e9429f95f183f3c045a976f3997030e3635541eff4dc698257a078b5c11e06829884badc23e5f7152a91aa9aa71208adf67c4d0426d398597b25a067359f64bc481f9008dca40d3ff1cd019829233b65025b39ae59fe4f8a0a8c59a02b748a1e845aff5a0e62d9d2f6fc275f7508bd0c2d41d3bb6562f168db3e85f2a038256946864ed412dc5ea8a6fc369b16a1318e0307bede87ba2195359bc0ab1ca0e02feb52fcba9924bf4e68b2e53a79ebf3a9f6d6532e11ecc706ad46b65a39cba0bf4bff552a96e13cde2073dbad1d9f4b55118726181c5ed6c04de7c52726c46ba03f2629eaeeb3e4952890ff1006e02fd6e465bfdb753f087587999b54b7c03cfea06397c26d491f6b8eec2024b6728513be6a383e55bf64f646bba29c5d6656d62180f90211a00992bf5157eaccf4864601d39f9e073a7ae832309f230223db6cb7e192d11823a04ab49dfeebd9e2b8ba145ad1937fbc2c91fbd9a86e5de9759be478c655a54b69a0480076858d2242c98155fd717898670f2427d5f0dde708c4ebbe4d8cc94a28fba09a6219d4e3d7fb9f45e8ac6a74f4d6fce0e009a8bf65844065ac2cb1a8992758a011b9db50426c079568a1aac799dc7bf14ff14b1e3ea500e57049b21e1223b219a0237997ff25176ee9982f6ff04588c13108c2207970e7cbdf4ba053ee03c0718aa0649b718b66c950d0216e0ca1f6d566fce8c58d60fc90929ea95218a03e355b71a0a10fd0f51606ade3d7bed5fc12fd91f3e0709035330f667d96518708c25c06b9a0ebe3cb77360b7936b89fbae60449bb66f931b4cd62ec6072430bf6c0e152e8f0a056dc243c796c4206bfc2f4c4f8860bce393be5e7abcc48cf275ba63911f76ec4a0a38b5bc381e2fe1fceeac9172c2237c48dc8696a8dfad0f67f9ada8bf23b0ecda0d96d0af61760a9b5dbc8531b506ae61c157675bdf6e6719f2bf133fe69f8b811a04847ffea8dd37e372503dabc3b008be95d6a436c64e326bdd5cbae9906ec0aa6a06c18eeece38b01f9a463d369ffbe2885fa0cfe021ffb347f12e1668ffbef970ba006792a2f5e5d1237dedb3d9e2644461225e3aced5f917460bfec2d5e21de4b70a08664b9c68f145eb508eb9efb09d5560bd29905481bb3c2e53e8deffd0fbcf1a880f901d1a0495b5e2d20a8769b14321be420a01b67392a8dcbb515d6bee5895b27b2d2421ea02c022119fb1c58ad3bdbad080ea501d5cb2b2253bb8c8e088e87bfbc169d8ebfa0c518164e9e397a46a06a5decbb01b6cf75ac4e7ac71e5de639f943d1c4b42c78a0ecbd565caef93002509578bb84a24dd2b0040c1fbe9b2b55d6163dd4f1152791a0a1c9fc1c2ceb6d868e3d5fcdf9af22e425b3338c68775539adfd7ef23fe5f94fa04ea5eee92134ecc7ff696e5ba032428c7b50612095545ee6d74398ff2d7682d0a0e0fb116c65b975847f7456edab9c116a303bb866bc8571c1f9ae7ccc217cac2880a057cafd092a53a5ca82a531e542117fbb0dd2e9d44129d010d4f085890821b8b980a050ce72a097660ec7ca33791064a3609f8bc0a48f534219f142ce0fa185c3b308a0a45c2aca3b9c5d048476ce9e9e605ca64518b0bcd99944a21aa90fece547cf76a0c2bdf2138ef40b0391c9c3bdef8d47129cd638bb4f43374baa20d18f45db3438a096426f9802546b0d5471cee8056165f7032ed7edbc7c31540afb85a3d6f8941da0165285a42323980b1188f52c204522193b081d6b41444be2399bb8b600bc42e8a0d840ee9b000cc16e01d90855ad26e962e6ba33dd66c90b6474a2397626c63a6580f8518080808080808080808080a0bc291d4b083fc8e5f99c0a58afad4415d71b20766c95c7c0847e9bf05a491d9fa08b8528f4163f709da762e379406dc9b54e2762ca799142ace4527e7f4d87a72180808080f8419e3e412f275a18f6e4d622aee4ff40b21467c926224771b782d4c095d1444ba1a02b9176b625f740c5b3c43ca502eb3363df27e2ba2ea14c3a3c12a80067e00ff5";
        let value = x"2b9176b625f740c5b3c43ca502eb3363df27e2ba2ea14c3a3c12a80067e00ff5";
        assert!(verify_proof(&root, key, proof) == value, 0);
    }

    #[test, expected_failure(abort_code = 21002)]
    fun test_verify_proof_with_invalid_node() {
        let root = x"8337239d521bd93f02f55f1dc3db62b10a834fc804bd31aaed98b52fc663c9e5";
        let key = x"a6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49";
        let proof = x"f90211a0dafbcd5c3b5e6276b4e71222c3744d1ec6ad9d25ca1caed3e4821300effabfbea0458d4ce0f0cab1afbd15acbc69eb8206a03b6dc0d3bfd82255395b08c68cf507a09037c2541b4f9055b3535cb9519b1b65a9eb2df099e19788be98d8c6cfcf70bca0ed63bb564f9aff544843003248f3d63105d5b14df4fb9d5ae40fd3210f309193a051ec2fa07a9a69a8a5e02cba3354d998e58f975c8745b021d7935d2b1685d4bba0d5e9505a5779c48464d163f8c74f2a87f25c3d06f93e93323da9d9279e5da1a9a0f4baeed83cd0218f9d7780e270d97f3e7793398a422fd75b9584d3eabd9abe2fa00e99f5e3bd38bd07e8e707de66cacd48e1b1460c5b6d91081b37944fbde4c510a0968234e8657ee613f1a44611e45b7056e23fa583c23b186439848869980162e0a05e4d0def691113d229808e866c7fbedf976f4d479e02327715c8e103fc8d470fa058cc691a0dea93ced5ed5e43dddc6ef81eeff8f21b8f3c461be8d0f6eed86c0da0717b9b5c86183e35fb607bfc606c6f7ec109e231a32c2530de7b0d4d833d32dda0859a5c33f68977fa39dad924864880af85522cb498653abc8379bbefb4fb062aa071516445ec6adfe13bbcb510c937068c560e24882abdaeceb797c66443e44462a0246a8a8b5cb71f3ad3dc1c45ccea7829d0089c6a64416a74f486ebb5cae9fd9ea0992b04facd4b70aa6e2786c97bcef8e3234943646539fbc220048f17a4566fe080f90211a065a6b0f08accaf855761b657ab145a373475dc641a8fc4349a0219feec4c6065a00a811a75ca4fa82cd99c0eeafdaedce0af64138a482d0d1d031e5d35f81a6d49a04a5d8cc1d810c1ae3bdf15dd57a0ede7454ec9f62e367c3d204fb17ead3059eaa04bb84173ee48689268371d9256f12066bf60f886f6ced45cb6dae995b676d634a0376d2e469356a4642ba0038e74829c2cdfab76533dac1060243214318094ef26a060d7bb7104a882158bae88527f6967e89e905d51dc4cde35d1495eb60e5d4835a0e996ae7e16f98133cb84fe1ad749b83646cfcb20309509b81af00a434993a5f3a0ce9d97eb37a9a2e9429f95f183f3c045a976f3997030e3635541eff4dc698257a078b5c11e06829884badc23e5f7152a91aa9aa71208adf67c4d0426d398597b25a067359f64bc481f9008dca40d3ff1cd019829233b65025b39ae59fe4f8a0a8c59a02b748a1e845aff5a0e62d9d2f6fc275f7508bd0c2d41d3bb6562f168db3e85f2a038256946864ed412dc5ea8a6fc369b16a1318e0307bede87ba2195359bc0ab1ca0e02feb52fcba9924bf4e68b2e53a79ebf3a9f6d6532e11ecc706ad46b65a39cba0bf4bff552a96e13cde2073dbad1d9f4b55118726181c5ed6c04de7c52726c46ba03f2629eaeeb3e4952890ff1006e02fd6e465bfdb753f087587999b54b7c03cfea06397c26d491f6b8eec2024b6728513be6a383e55bf64f646bba29c5d6656d62180f90211a00992bf5157eaccf4864601d39f9e073a7ae832309f230223db6cb7e192d11823a04ab49dfeebd9e2b8ba145ad1937fbc2c91fbd9a86e5de9759be478c655a54b69a0480076858d2242c98155fd717898670f2427d5f0dde708c4ebbe4d8cc94a28fba09a6219d4e3d7fb9f45e8ac6a74f4d6fce0e009a8bf65844065ac2cb1a8992758a011b9db50426c079568a1aac799dc7bf14ff14b1e3ea500e57049b21e1223b219a0237997ff25176ee9982f6ff04588c13108c2207970e7cbdf4ba053ee03c0718aa0649b718b66c950d0216e0ca1f6d566fce8c58d60fc90929ea95218a03e355b71a0a10fd0f51606ade3d7bed5fc12fd91f3e0709035330f667d96518708c25c06b9a0ebe3cb77360b7936b89fbae60449bb66f931b4cd62ec6072430bf6c0e152e8f0a056dc243c796c4206bfc2f4c4f8860bce393be5e7abcc48cf275ba63911f76ec4a0a38b5bc381e2fe1fceeac9172c2237c48dc8696a8dfad0f67f9ada8bf23b0ecda0d96d0af61760a9b5dbc8531b506ae61c157675bdf6e6719f2bf133fe69f8b811a04847ffea8dd37e372503dabc3b008be95d6a436c64e326bdd5cbae9906ec0aa6a06c18eeece38b01f9a463d369ffbe2885fa0cfe021ffb347f12e1668ffbef970ba006792a2f5e5d1237dedb3d9e2644461225e3aced5f917460bfec2d5e21de4b70a08664b9c68f145eb508eb9efb09d5560bd29905481bb3c2e53e8deffd0fbcf1a880f901d1a0495b5e2d20a8769b14321be420a01b67392a8dcbb515d6bee5895b27b2d2421ea02c022119fb1c58ad3bdbad080ea501d5cb2b2253bb8c8e088e87bfbc169d8ebfa0c518164e9e397a46a06a5decbb01b6cf75ac4e7ac71e5de639f943d1c4b42c78a0ecbd565caef93002509578bb84a24dd2b0040c1fbe9b2b55d6163dd4f1152791a0a1c9fc1c2ceb6d868e3d5fcdf9af22e425b3338c68775539adfd7ef23fe5f94fa04ea5eee92134ecc7ff696e5ba032428c7b50612095545ee6d74398ff2d7682d0a0e0fb116c65b975847f7456edab9c116a303bb866bc8571c1f9ae7ccc217cac2880a057cafd092a53a5ca82a531e542117fbb0dd2e9d44129d010d4f085890821b8b980a050ce72a097660ec7ca33791064a3609f8bc0a48f534219f142ce0fa185c3b308a0a45c2aca3b9c5d048476ce9e9e605ca64518b0bcd99944a21aa90fece547cf76a0c2bdf2138ef40b0391c9c3bdef8d47129cd638bb4f43374baa20d18f45db3438a096426f9802546b0d5471cee8056165f7032ed7edbc7c31540afb85a3d6f8941da0165285a42323980b1188f52c204522193b081d6b41444be2399bb8b600bc42e8a0d840ee9b000cc16e01d90855ad26e962e6ba33dd66c90b6474a2397626c63a6580f8518080808080808080808080a0bc291d4b083fc8e5f99c0a58afad4415d71b20766c95c7c0847e9bf05a491d9fa08b8528f4163f709da762e379406dc9b54e2762ca799142ace4527e7f4d87a72180808080f8419e3e412f275a18f6e4d622aee4ff40b21467c926224771b782d4c095d1444ba1a02b9176b625f740c5b3c43ca502eb3363df27e2ba2ea14c3a3c12a80067e00f99";
        let value = x"2b9176b625f740c5b3c43ca502eb3363df27e2ba2ea14c3a3c12a80067e00ff5";
        assert!(verify_proof(&root, key, proof) == value, 0);
    }

    #[test, expected_failure(abort_code = 21003)]
    fun test_verify_proof_with_missing_node() {
        let root = x"5ebc7b4798fd32468ada81e13095cabfc3f57e99b8a4b18921d4a56239a628a5";
        let key = x"13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e3";
        let proof = x"f90211a0dafbcd5c3b5e6276b4e71222c3744d1ec6ad9d25ca1caed3e4821300effabfbea0458d4ce0f0cab1afbd15acbc69eb8206a03b6dc0d3bfd82255395b08c68cf507a09037c2541b4f9055b3535cb9519b1b65a9eb2df099e19788be98d8c6cfcf70bca004a91c30c914125cc39ac93e5721b255e4e41ccf10f37e3db5ba931cb57d2112a089547e788f2b2a55f769450ad12f57b2a641ebd406ba47db17b54e486790f0b7a0d5e9505a5779c48464d163f8c74f2a87f25c3d06f93e93323da9d9279e5da1a9a0f4baeed83cd0218f9d7780e270d97f3e7793398a422fd75b9584d3eabd9abe2fa00e99f5e3bd38bd07e8e707de66cacd48e1b1460c5b6d91081b37944fbde4c510a006f69242d76c3d5e4fe32cbd0879db55461427b2f8b36a49ad941cb54aee5c69a05e4d0def691113d229808e866c7fbedf976f4d479e02327715c8e103fc8d470fa058cc691a0dea93ced5ed5e43dddc6ef81eeff8f21b8f3c461be8d0f6eed86c0da0717b9b5c86183e35fb607bfc606c6f7ec109e231a32c2530de7b0d4d833d32dda0859a5c33f68977fa39dad924864880af85522cb498653abc8379bbefb4fb062aa071516445ec6adfe13bbcb510c937068c560e24882abdaeceb797c66443e44462a0246a8a8b5cb71f3ad3dc1c45ccea7829d0089c6a64416a74f486ebb5cae9fd9ea0992b04facd4b70aa6e2786c97bcef8e3234943646539fbc220048f17a4566fe080f90211a0461ef1fcf3051806b8ff9e551b71b3093b26d7ada8917af04fb3f580322e6c4fa06f298cc27459dc660d9513d63c7846e25166490cfcd615b27422173ec38b9edba03f284d0cd0e3c1313424ea6b440ee730d79268406a3d65a9579a2ae90ac8ef78a00bfc7895c0741e37e81c4dd39e84fd8754242af171c9165773f07d814cd859fea06f836f2738280cafc2cf99060fcfb01aeb3505e1beaeef9275daddabc0ab92f2a071bb9b4f369a063c3a6c8f426689f9c5f993eb27486371a3b6973913896ee6f0a0d478c00d06569b34edb452af575b64ade69658efc1daab14bc64a642e864d3cfa0af693b644e9189047d091d6cad97f55ea01fc18b13ebef6b86c11203744f7675a0cbec70305cbb094a3f862d867001939bf9bbc199899e65c9f24b83cad53ab372a0570d581a900e6ad92e5f2323ba151b4965d0653d5c18d8d9e539e6c923779b22a0cb4731156499cff721fe227c8f677f682b87a666bb04be576c7ad4ae5ac18b85a06611761c92fccbfd69a1fe3993a54871b6edd21d8fefb00b8c98d801c5957691a08a8a31f716e7e9a19963d01a7625475fa680b6b96dfa63c2c6be7a5802908d5ea0d66f5882297669ff1280e9cda87b049dea0f84c2fb518406a8f3d34841559e83a0ee88573c11cfa7780dc80152b93d2e583d44c47e8351ce81766f3af64db7c97aa0f244d669b64ad8c5889e32f014c5335979d8842e473437f05b98e7ea690c118780f90211a0cd015f61f5ba1d5d47a41d972dcd0d4fc369ef71e4d4968dd7c82b30950f53c6a04f301772b5857f5c66457a8ee440d7c0fcfb5133bf0e948ec295225ec99ee1fba0b5189976335552bb1ef9715eda4b9969b3e2e54fe9f549710056206dda830b63a07a281c35823c51be3f29ddc6cce3ae18e9a571e23624d37aef17b89017956487a0e2534c2f4d75cb5cda190c47d62217d1293a73127c81a3d5278a94fe3989db68a054b116d36557e0e80119241cbde89826d5bcac69129d30bf698aa04a3784bda2a0f6916f2f6fe9307e3da3b2bc901bfe5d939dc3cfdd7a8ea8fc99569d864b2818a0d8f1113b46ddf34b2a303e9ec696c69c9c50646cbf2a523cb6e56c480845f9b0a00154673865e8d761ad84a805394c93ba77f2a08af7b7ce40844defd1189bc714a09c821362419146fe9478462189aeb30195e4f763b1559a76500a34d1c951837ea03c48667fc7a8e3e24f67c9e7b4a4e3f85b409c8716f7c3c22e6e2f23c90c208ea0efb58bb75bfda7e97a7a6e1954d5a2d2c70f93672c7213b918a946293bb215e2a0dd2cff1e4a037d4b1eff3a90643c72931831ce8c57d5582f09927354470e9db2a0f3d68864f5df611599cfdafc842e097ed73f2b16f9e9f7e2c6ff1ddfeac30f8ca054c07a46869437934b853ef8886bc70042e78f47a9be84366937189b11d38841a0085b503d861a12f69e37e867b3692445fc33cbdedcd6aa9fcdfb94036606d7e980f901b1a0862dd338109afdeaeabe75a08ecbf29e18ad039ace70f305f8a786f237aff355a024a530813317cb1183df06c0f7466ac75f10f05754de681978092c88633f890c8080a08e19baaf4d1efa1399f2d216a6b87a1f5acd14422e9b012a3e948b1acb7d044aa08cbeddb590b13291e38ddca27244f6f025aaafcc7c7d8a52c5898f89e219361ea0c2d66421e14c120679b9285c8d55a72387f6289b749d234281f8464d33d1334680a0ac4eecd5a6dd055f43ebd1e638fb2eb414229c882b168e75888d4d6afa3d7a4fa091313f65494cc385e5387304972b15406921f5a7f3ec07f93d30f73c1e8b3894a0164a825a64d8c56d91ab5344b8f68617238289c125898e1d910ca8b0be071cb3a0cf6e7337febc0e186de785e0af6c613547c3a923cf34fd8cdef650ff7026d41ea0e01d82cc5908addcb4e9c803f29a2e83c1c93fbcb0b03afb8e71aace1c4d08c4a017fb283859a47803d8fa601dc17fdb7a20451e2790a96112eeb5774cb84ab0c3a0a719a858ce2dcdaadfd77c2e97ad7d7c919163a9eb8ff40577744312c804438ca0fec8a2aebc962f157c63ae9279cb332ec6ad4176cf16e2b7f698883e2b5a369980f85180808080a09382cd46c3f671a31587e82d0a0f6bcd3fcee0e04dee0e07482cd896597711b5808080808080808080a0b16f81da7150b4b4b64c40e810f2815ffb104f6ccff8ffb16347563f5668a95a8080";
        let value = x"00";
        assert!(verify_proof(&root, key, proof) == value, 0);
    }
}


/*

0eb5be412f275a18f6e4d622aee4ff40b21467c926224771b782d4c095d1444b // KeyHex

"0xf9 // list
0211 // 529 bytes
a0dafbcd5c3b5e6276b4e71222c3744d1ec6ad9d25ca1caed3e4821300effabfbe
a0e6dd70078a5e4c4489eda2558f368954b621dbe632ab9f0ac42a81cab2086360
a0fab2aecb9335f1f491c17d1bbd295ba34f0a44ce2c4e266a22bba6d560f7fce7
a039ff5bee25ebf0d905d99c7d805fb35045f957915baed5a2abade09cab8e3ad4
a0fa3c19bf4cb2e88cb08a4fc61ea277905a5bcb1df953aec8bfc1ba512ef0aa16
a07a85dfe092cbba00761f4c52ae5cb601bc1f0282ca7423f86bdeb95143a632ed
a0f4baeed83cd0218f9d7780e270d97f3e7793398a422fd75b9584d3eabd9abe2f
a00e99f5e3bd38bd07e8e707de66cacd48e1b1460c5b6d91081b37944fbde4c510
a0148713d650aaf825f6d7751b9a7f1e4efb22f9ff805e07c78cd4949025198515
a04ccc4f542e7e7cf2734e71527411707eb641d61dbf683ace3c154d051bbb6d5d
a058cc691a0dea93ced5ed5e43dddc6ef81eeff8f21b8f3c461be8d0f6eed86c0d  xx
a08a04afd8de0ee7384d09f584e3c518c71c8afd6671a873a9f8e79edd8b9e99e6
a030822a11451869be297b93ce2efa4ab16df21cc5015341e12c31dec7a996d2bc
a0597e14ee400a47aec47644df093cae414466667c727caaa48b0e44bbdc7fb13f
a077dd57c2a0735aa2668e460ad8b4bf06c3c25f5b9cd2bf10ecd3c250a1c6bcd4
a0992b04facd4b70aa6e2786c97bcef8e3234943646539fbc220048f17a4566fe0
80" // []


0xf9
0211
a065a6b0f08accaf855761b657ab145a373475dc641a8fc4349a0219feec4c6065
a00a811a75ca4fa82cd99c0eeafdaedce0af64138a482d0d1d031e5d35f81a6d49
a04a5d8cc1d810c1ae3bdf15dd57a0ede7454ec9f62e367c3d204fb17ead3059ea
a04bb84173ee48689268371d9256f12066bf60f886f6ced45cb6dae995b676d634
a0376d2e469356a4642ba0038e74829c2cdfab76533dac1060243214318094ef26
a060d7bb7104a882158bae88527f6967e89e905d51dc4cde35d1495eb60e5d4835
a0e996ae7e16f98133cb84fe1ad749b83646cfcb20309509b81af00a434993a5f3
a0ce9d97eb37a9a2e9429f95f183f3c045a976f3997030e3635541eff4dc698257
a078b5c11e06829884badc23e5f7152a91aa9aa71208adf67c4d0426d398597b25
a067359f64bc481f9008dca40d3ff1cd019829233b65025b39ae59fe4f8a0a8c59
a02b748a1e845aff5a0e62d9d2f6fc275f7508bd0c2d41d3bb6562f168db3e85f2
a038256946864ed412dc5ea8a6fc369b16a1318e0307bede87ba2195359bc0ab1c
a0e02feb52fcba9924bf4e68b2e53a79ebf3a9f6d6532e11ecc706ad46b65a39cb
a0bf4bff552a96e13cde2073dbad1d9f4b55118726181c5ed6c04de7c52726c46b
a03f2629eaeeb3e4952890ff1006e02fd6e465bfdb753f087587999b54b7c03cfe  xx
a06397c26d491f6b8eec2024b6728513be6a383e55bf64f646bba29c5d6656d621
80


 "0xf90211
 a00992bf5157eaccf4864601d39f9e073a7ae832309f230223db6cb7e192d11823
 a04ab49dfeebd9e2b8ba145ad1937fbc2c91fbd9a86e5de9759be478c655a54b69
 a0480076858d2242c98155fd717898670f2427d5f0dde708c4ebbe4d8cc94a28fb
 a09a6219d4e3d7fb9f45e8ac6a74f4d6fce0e009a8bf65844065ac2cb1a8992758
 a011b9db50426c079568a1aac799dc7bf14ff14b1e3ea500e57049b21e1223b219
 a0237997ff25176ee9982f6ff04588c13108c2207970e7cbdf4ba053ee03c0718a
 a0649b718b66c950d0216e0ca1f6d566fce8c58d60fc90929ea95218a03e355b71
 a0a10fd0f51606ade3d7bed5fc12fd91f3e0709035330f667d96518708c25c06b9
 a0ebe3cb77360b7936b89fbae60449bb66f931b4cd62ec6072430bf6c0e152e8f0
 a056dc243c796c4206bfc2f4c4f8860bce393be5e7abcc48cf275ba63911f76ec4
 a0a38b5bc381e2fe1fceeac9172c2237c48dc8696a8dfad0f67f9ada8bf23b0ecd
 a0d96d0af61760a9b5dbc8531b506ae61c157675bdf6e6719f2bf133fe69f8b811  xx
 a04847ffea8dd37e372503dabc3b008be95d6a436c64e326bdd5cbae9906ec0aa6
 a06c18eeece38b01f9a463d369ffbe2885fa0cfe021ffb347f12e1668ffbef970b
 a006792a2f5e5d1237dedb3d9e2644461225e3aced5f917460bfec2d5e21de4b70
 a08664b9c68f145eb508eb9efb09d5560bd29905481bb3c2e53e8deffd0fbcf1a8
 80",
 
 "0xf901d1
a0495b5e2d20a8769b14321be420a01b67392a8dcbb515d6bee5895b27b2d2421e
a02c022119fb1c58ad3bdbad080ea501d5cb2b2253bb8c8e088e87bfbc169d8ebf
a0c518164e9e397a46a06a5decbb01b6cf75ac4e7ac71e5de639f943d1c4b42c78
a0ecbd565caef93002509578bb84a24dd2b0040c1fbe9b2b55d6163dd4f1152791
a0a1c9fc1c2ceb6d868e3d5fcdf9af22e425b3338c68775539adfd7ef23fe5f94f
a04ea5eee92134ecc7ff696e5ba032428c7b50612095545ee6d74398ff2d7682d0  xx
a0e0fb116c65b975847f7456edab9c116a303bb866bc8571c1f9ae7ccc217cac28
80
a057cafd092a53a5ca82a531e542117fbb0dd2e9d44129d010d4f085890821b8b9
80
a050ce72a097660ec7ca33791064a3609f8bc0a48f534219f142ce0fa185c3b308
a0a45c2aca3b9c5d048476ce9e9e605ca64518b0bcd99944a21aa90fece547cf76
a0c2bdf2138ef40b0391c9c3bdef8d47129cd638bb4f43374baa20d18f45db3438
a096426f9802546b0d5471cee8056165f7032ed7edbc7c31540afb85a3d6f8941d
a0165285a42323980b1188f52c204522193b081d6b41444be2399bb8b600bc42e8
a0d840ee9b000cc16e01d90855ad26e962e6ba33dd66c90b6474a2397626c63a65
80",
            
"0xf851
80
80
80
80
80
80
80
80
80
80
80
a0bc291d4b083fc8e5f99c0a58afad4415d71b20766c95c7c0847e9bf05a491d9f  xx
a08b8528f4163f709da762e379406dc9b54e2762ca799142ace4527e7f4d87a721
80
80
80
80",

"0xf841
9e
3 e412f275a18f6e4d622aee4ff40b21467c926224771b782d4c095d1444 b  indicates a value node
a1
a0
2b9176b625f740c5b3c43ca502eb3363df27e2ba2ea14c3a3c12a80067e00ff5"   // value


*/

